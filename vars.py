# -*- coding: utf-8 -*-
import random

# Tamanho da população
population_size = 100

# Controle de gerações para execução
generations = 1000

# Quantidade de individuos por torneio
tournament_size = 2

# Taxa de mutação
mutation_rate = 0

# Quantidade de nodes da rede
# Deve possuir indice nos dicionários de custo, banda e latência, do contrário irá gerar erro
num_nodes = 20

# Quantidade possível de links no grafo completo (onde com todos links ativos, todos nodes se conectariam entre si)
num_links = (num_nodes * (num_nodes - 1)) // 2

# Banda mínima exigida por link para evitar penalidade
min_bandwidth = 5



##############  VALORES ALEATÓRIOS
# Custo dos links, indice relativo ao número de nodes
link_costs = {
    100: [random.randint(1, 9) for _ in range((100 * (100 - 1)) // 2)],
    90: [random.randint(1, 9) for _ in range((90 * (90 - 1)) // 2)],
    70: [random.randint(1, 9) for _ in range((70 * (70 - 1)) // 2)],
    50: [random.randint(1, 9) for _ in range((50 * (50 - 1)) // 2)],
    30: [random.randint(1, 9) for _ in range((30 * (30 - 1)) // 2)],
    20: [random.randint(1, 9) for _ in range((20 * (20 - 1)) // 2)],
    15: [random.randint(1, 9) for _ in range((15 * (15 - 1)) // 2)],
    10: [random.randint(1, 9) for _ in range((10 * (10 - 1)) // 2)],
    5: [random.randint(1, 9) for _ in range((5 * (5 - 1)) // 2)]
}

# Largura de banda dos links, indice relativo ao número de nodes
link_bandwidths = {
    100: [random.randint(1, 9) for _ in range((100 * (100 - 1)) // 2)],
    90: [random.randint(1, 9) for _ in range((90 * (90 - 1)) // 2)],
    70: [random.randint(1, 9) for _ in range((70 * (70 - 1)) // 2)],
    50: [random.randint(1, 9) for _ in range((50 * (50 - 1)) // 2)],
    30: [random.randint(1, 9) for _ in range((30 * (30 - 1)) // 2)],
    20: [random.randint(1, 9) for _ in range((20 * (20 - 1)) // 2)],
    15: [random.randint(1, 9) for _ in range((15 * (15 - 1)) // 2)],
    10: [random.randint(1, 9) for _ in range((10 * (10 - 1)) // 2)],
    5: [random.randint(1, 9) for _ in range((5 * (5 - 1)) // 2)]
}

# Latência dos links, indice relativo ao número de nodes
link_latencies = {
    100: [random.randint(1, 99) for _ in range((100 * (100 - 1)) // 2)],
    90: [random.randint(1, 99) for _ in range((90 * (90 - 1)) // 2)],
    70: [random.randint(1, 99) for _ in range((70 * (70 - 1)) // 2)],
    50: [random.randint(1, 99) for _ in range((50 * (50 - 1)) // 2)],
    30: [random.randint(1, 99) for _ in range((30 * (30 - 1)) // 2)],
    20: [random.randint(1, 99) for _ in range((20 * (20 - 1)) // 2)],
    15: [random.randint(1, 99) for _ in range((15 * (15 - 1)) // 2)],
    10: [random.randint(1, 99) for _ in range((10 * (10 - 1)) // 2)],
    5: [random.randint(1, 99) for _ in range((5 * (5 - 1)) // 2)]
}



"""
##############  VALORES ESTÁTICOS
# Custo dos links, indice relativo ao número de nodes
link_costs = {
    30: [3, 2, 7, 7, 8, 4, 3, 2, 8, 2, 5, 7, 6, 4, 7, 7, 7, 3, 2, 8, 9, 8, 4, 3, 8, 4, 5, 3, 3, 5, 4, 
         5, 7, 7, 3, 6, 7, 8, 5, 9, 5, 2, 8, 3, 1, 7, 7, 8, 9, 3, 9, 8, 6, 9, 7, 3, 8, 7, 3, 6, 3, 8, 
         5, 4, 8, 5, 3, 8, 7, 5, 9, 7, 4, 4, 7, 8, 5, 3, 1, 1, 2, 7, 6, 2, 3, 9, 4, 8, 3, 5, 3, 2, 8, 
         7, 6, 7, 8, 5, 9, 9, 1, 6, 7, 8, 1, 7, 3, 1, 2, 5, 4, 8, 7, 5, 6, 5, 9, 6, 5, 3, 4, 8, 4, 3, 
         4, 5, 4, 7, 6, 3, 7, 8, 6, 9, 5, 1, 1, 9, 2, 8, 4, 1, 7, 8, 1, 8, 6, 1, 9, 5, 8, 5, 8, 6, 8, 
         2, 4, 7, 8, 7, 2, 2, 6, 5, 5, 7, 5, 6, 7, 7, 2, 6, 5, 4, 9, 8, 4, 7, 3, 3, 2, 7, 9, 7, 8, 1, 
         2, 3, 9, 8, 9, 3, 5, 3, 1, 3, 5, 5, 9, 1, 1, 1, 6, 7, 3, 8, 5, 1, 5, 6, 2, 4, 8, 6, 7, 9, 4, 
         5, 8, 1, 8, 4, 2, 6, 1, 1, 9, 9, 9, 3, 2, 5, 8, 8, 1, 7, 8, 9, 9, 8, 2, 8, 4, 3, 7, 8, 3, 1, 
         6, 4, 8, 7, 2, 1, 7, 1, 5, 2, 9, 7, 4, 3, 8, 4, 2, 9, 2, 8, 8, 7, 3, 9, 7, 4, 3, 7, 6, 2, 9, 
         7, 4, 6, 6, 7, 9, 3, 5, 9, 5, 7, 1, 2, 4, 5, 2, 5, 3, 7, 5, 3, 8, 2, 4, 4, 6, 1, 7, 1, 3, 7, 
         8, 9, 8, 3, 2, 4, 5, 5, 8, 9, 8, 3, 4, 8, 3, 8, 7, 4, 6, 2, 2, 4, 4, 7, 8, 5, 1, 2, 1, 6, 5, 
         2, 9, 6, 9, 9, 9, 6, 4, 5, 9, 9, 3, 6, 6, 7, 4, 9, 4, 9, 5, 2, 8, 6, 2, 7, 6, 7, 7, 1, 3, 8, 
         8, 3, 2, 8, 9, 8, 5, 5, 5, 7, 6, 5, 1, 7, 7, 9, 9, 8, 1, 9, 8, 7, 3, 6, 4, 5, 2, 8, 8, 3, 4, 
         8, 5, 1, 2, 1, 4, 5, 1, 4, 2, 8, 9, 9, 6, 6, 7, 8, 5, 5, 6, 6, 8, 2, 2, 9, 3, 3, 7, 3, 7, 1, 
         5],
    20: [3, 3, 9, 5, 4, 1, 4, 8, 1, 3, 7, 6, 5, 1, 4, 7, 6, 3, 5, 2, 2, 9, 1, 3, 8, 3, 4, 3, 8, 1, 6, 
         3, 3, 5, 4, 2, 6, 4, 4, 4, 1, 3, 3, 7, 1, 4, 2, 9, 5, 8, 5, 3, 1, 3, 2, 2, 2, 2, 8, 6, 3, 4, 
         1, 1, 2, 6, 7, 8, 4, 8, 1, 4, 5, 8, 7, 1, 8, 8, 1, 7, 6, 6, 3, 1, 1, 9, 6, 1, 6, 5, 7, 6, 7, 
         4, 3, 7, 6, 8, 4, 2, 2, 9, 6, 4, 5, 1, 6, 9, 1, 5, 2, 8, 1, 4, 2, 9, 6, 2, 4, 6, 5, 6, 3, 7, 
         3, 4, 1, 4, 2, 3, 9, 2, 3, 9, 5, 3, 3, 1, 2, 9, 9, 8, 8, 2, 5, 6, 7, 8, 4, 4, 2, 3, 6, 1, 9, 
         9, 5, 1, 7, 5, 7, 4, 9, 7, 7, 3, 4, 1, 2, 2, 9, 9, 9, 4, 1, 8, 8, 6, 6, 7, 8, 7, 5, 1, 3, 9, 
         6, 9, 4, 4],
    15: [9, 3, 8, 8, 5, 3, 7, 3, 5, 5, 6, 3, 8, 1, 7, 7, 9, 8, 2, 6, 7, 2, 8, 1, 7, 4, 9, 4, 1, 1, 5, 
         2, 6, 4, 4, 4, 4, 6, 8, 2, 5, 9, 1, 8, 2, 4, 8, 8, 6, 6, 8, 1, 1, 4, 2, 4, 4, 7, 8, 5, 2, 1, 
         5, 3, 1, 7, 7, 7, 1, 9, 8, 1, 1, 5, 4, 8, 3, 4, 4, 3, 9, 7, 1, 8, 2, 1, 2, 4, 8, 5, 9, 8, 5, 
         9, 7, 1, 4, 2, 9, 9, 4, 8, 1, 1, 1],
    10: [9, 3, 6, 4, 3, 7, 7, 5, 2, 6, 3, 5, 5, 8, 2, 8, 3, 5, 7, 8, 4, 4, 5, 9, 2, 4, 1, 9, 7, 2, 7, 
         6, 1, 2, 3, 6, 8, 5, 4, 2, 3, 2, 4, 1, 1],
    5: [7, 8, 1, 8, 1, 5, 4, 2, 5, 1]
}

# Largura de banda dos links, indice relativo ao número de nodes
link_bandwidths = {
    30: [6, 6, 9, 8, 2, 6, 9, 9, 8, 9, 8, 9, 8, 1, 6, 9, 4, 1, 3, 9, 5, 5, 1, 1, 5, 8, 8, 4, 6, 6, 8, 
         2, 3, 2, 5, 2, 3, 6, 7, 1, 3, 5, 5, 2, 8, 5, 2, 3, 3, 1, 4, 3, 6, 6, 5, 4, 5, 6, 9, 4, 7, 5, 
         4, 5, 2, 3, 1, 4, 3, 1, 8, 9, 3, 3, 8, 1, 4, 4, 6, 9, 1, 8, 7, 6, 8, 5, 9, 3, 6, 2, 4, 2, 5, 
         1, 4, 6, 5, 4, 2, 2, 4, 9, 4, 7, 1, 4, 7, 9, 8, 9, 1, 5, 7, 7, 9, 5, 8, 6, 9, 7, 2, 8, 9, 2, 
         7, 2, 2, 3, 3, 7, 2, 7, 8, 3, 8, 5, 3, 4, 5, 1, 8, 1, 2, 6, 9, 1, 2, 5, 9, 4, 1, 7, 5, 6, 4, 
         3, 9, 8, 4, 5, 2, 1, 3, 9, 5, 8, 5, 8, 1, 3, 6, 1, 5, 1, 4, 4, 2, 6, 1, 4, 2, 2, 2, 9, 4, 3, 
         2, 2, 9, 8, 6, 2, 3, 7, 2, 2, 5, 2, 4, 8, 4, 8, 5, 8, 2, 7, 1, 5, 1, 8, 9, 6, 5, 3, 5, 1, 6, 
         8, 2, 7, 6, 2, 8, 6, 7, 5, 9, 3, 2, 8, 9, 4, 9, 4, 6, 9, 6, 5, 6, 8, 3, 2, 4, 8, 8, 6, 3, 6, 
         5, 3, 1, 1, 8, 9, 9, 9, 5, 9, 6, 8, 6, 7, 4, 2, 9, 7, 7, 3, 2, 4, 4, 5, 5, 6, 5, 8, 5, 2, 4, 
         3, 3, 8, 4, 3, 6, 1, 4, 4, 3, 2, 6, 6, 4, 9, 8, 2, 1, 2, 9, 6, 8, 3, 4, 1, 2, 6, 2, 2, 1, 2, 
         6, 9, 8, 3, 9, 2, 6, 3, 8, 3, 3, 5, 3, 8, 5, 5, 5, 9, 9, 3, 7, 7, 2, 5, 3, 2, 6, 7, 1, 8, 1, 
         2, 1, 8, 7, 5, 3, 5, 4, 8, 5, 7, 9, 6, 7, 7, 8, 4, 7, 9, 5, 3, 6, 7, 1, 7, 4, 7, 5, 8, 9, 8, 
         4, 7, 7, 3, 9, 2, 6, 2, 4, 5, 2, 5, 7, 6, 1, 6, 5, 3, 2, 6, 7, 6, 5, 3, 3, 5, 7, 2, 7, 9, 3, 
         4, 7, 4, 1, 3, 2, 7, 3, 9, 6, 1, 9, 2, 3, 1, 5, 5, 5, 7, 8, 9, 8, 5, 3, 9, 8, 6, 9, 8, 1, 1, 
         6],
    20: [2, 7, 3, 8, 4, 6, 1, 6, 8, 5, 6, 9, 1, 2, 5, 5, 4, 8, 5, 9, 8, 2, 1, 1, 8, 7, 3, 5, 6, 2, 2, 
         4, 8, 2, 5, 3, 9, 1, 1, 9, 8, 6, 1, 4, 8, 9, 8, 5, 5, 1, 3, 7, 2, 6, 2, 2, 4, 2, 3, 9, 4, 5, 
         9, 2, 1, 1, 9, 2, 4, 3, 2, 8, 1, 2, 1, 2, 2, 9, 1, 4, 2, 4, 5, 8, 5, 6, 4, 6, 4, 6, 5, 3, 3, 
         8, 9, 3, 7, 2, 5, 6, 5, 4, 6, 5, 4, 6, 1, 4, 2, 2, 9, 1, 9, 9, 6, 4, 5, 5, 6, 1, 7, 7, 3, 6, 
         1, 6, 7, 5, 1, 3, 5, 7, 2, 7, 9, 1, 4, 6, 4, 9, 3, 4, 8, 7, 1, 1, 5, 8, 5, 5, 8, 7, 8, 9, 4, 
         8, 9, 3, 5, 7, 6, 1, 9, 2, 6, 5, 7, 7, 6, 1, 7, 7, 4, 5, 2, 8, 2, 2, 4, 3, 5, 9, 7, 4, 7, 9, 
         2, 4, 7, 2],
    15: [9, 4, 1, 8, 6, 8, 7, 5, 5, 5, 3, 4, 4, 5, 1, 6, 2, 9, 6, 7, 8, 7, 3, 1, 1, 8, 9, 6, 2, 1, 5, 
         4, 2, 9, 1, 8, 9, 1, 8, 7, 8, 3, 4, 7, 8, 1, 2, 4, 4, 7, 2, 3, 3, 4, 2, 5, 4, 7, 9, 7, 5, 2, 
         6, 1, 4, 7, 6, 3, 4, 2, 9, 6, 4, 4, 7, 7, 4, 8, 6, 2, 8, 9, 7, 2, 9, 4, 2, 8, 4, 8, 3, 4, 6, 
         5, 6, 5, 8, 8, 3, 2, 3, 8, 5, 9, 8],
    10: [4, 2, 5, 2, 4, 7, 6, 9, 8, 2, 9, 8, 6, 4, 4, 2, 6, 9, 7, 1, 5, 1, 6, 6, 2, 5, 6, 7, 6, 8, 9, 
         6, 2, 5, 8, 3, 7, 8, 3, 8, 3, 4, 5, 4, 5],
    5: [1, 6, 8, 2, 3, 4, 4, 6, 4, 1]
}

# Latência dos links, indice relativo ao número de nodes
link_latencies = {
    30: [30, 50, 20, 90, 80, 20, 60, 70, 10, 90, 20, 80, 30, 10, 80, 20, 10, 90, 90, 60, 20, 20, 10, 70, 20, 10, 70, 20, 30, 10, 10,
         20, 80, 80, 40, 60, 20, 70, 40, 90, 60, 70, 70, 10, 40, 40, 50, 70, 60, 60, 30, 40, 90, 30, 70, 20, 10, 70, 30, 30, 90, 30, 
         80, 50, 10, 90, 10, 40, 70, 40, 40, 50, 30, 50, 50, 40, 40, 70, 50, 30, 60, 60, 90, 10, 80, 30, 80, 10, 30, 20, 10, 10, 10, 
         10, 60, 10, 70, 20, 60, 40, 40, 80, 70, 30, 90, 90, 60, 60, 60, 30, 70, 30, 60, 50, 20, 20, 80, 70, 80, 60, 70, 10, 10, 30, 
         40, 80, 20, 40, 30, 10, 90, 30, 10, 30, 90, 20, 90, 60, 10, 40, 40, 80, 30, 40, 40, 70, 10, 20, 50, 20, 30, 70, 50, 10, 80, 
         60, 10, 70, 80, 50, 70, 20, 70, 90, 70, 90, 80, 40, 30, 40, 90, 60, 50, 10, 10, 20, 10, 30, 90, 50, 90, 60, 70, 90, 90, 40, 
         90, 40, 30, 30, 40, 80, 80, 90, 50, 60, 80, 20, 10, 10, 20, 70, 20, 30, 80, 50, 90, 10, 30, 30, 70, 60, 50, 40, 60, 50, 70, 
         60, 20, 60, 70, 30, 90, 60, 60, 10, 90, 80, 10, 50, 70, 10, 70, 20, 10, 80, 10, 50, 40, 40, 80, 60, 40, 70, 50, 40, 40, 80, 
         40, 10, 50, 60, 80, 50, 20, 90, 10, 10, 20, 50, 90, 60, 70, 70, 60, 30, 60, 90, 20, 60, 90, 80, 50, 10, 40, 30, 10, 80, 80, 
         90, 20, 30, 30, 40, 40, 80, 50, 40, 90, 10, 50, 10, 40, 60, 50, 50, 10, 60, 20, 70, 50, 80, 90, 20, 60, 30, 90, 90, 20, 10, 
         10, 40, 90, 30, 60, 70, 90, 60, 10, 80, 40, 60, 90, 80, 20, 20, 90, 70, 50, 30, 20, 30, 90, 30, 30, 90, 60, 80, 50, 40, 50, 
         50, 20, 20, 50, 60, 70, 90, 30, 50, 50, 30, 60, 70, 40, 20, 20, 60, 20, 50, 30, 10, 50, 10, 30, 10, 20, 30, 10, 70, 30, 20, 
         50, 10, 50, 80, 20, 50, 50, 50, 30, 50, 10, 50, 80, 40, 50, 30, 90, 60, 90, 80, 90, 60, 60, 60, 60, 90, 70, 20, 60, 90, 90, 
         30, 50, 10, 40, 60, 70, 70, 10, 50, 50, 40, 20, 80, 50, 10, 20, 50, 80, 80, 10, 50, 10, 20, 60, 60, 80, 10, 40, 10, 60, 30, 
         90],
    20: [70, 10, 70, 40, 90, 80, 50, 50, 40, 10, 20, 50, 40, 20, 80, 60, 60, 50, 20, 40, 70, 80, 80, 20, 30, 30, 90, 20, 10, 90, 70, 
         30, 70, 30, 60, 20, 70, 20, 70, 30, 80, 60, 50, 70, 50, 40, 50, 60, 10, 10, 50, 20, 60, 90, 20, 50, 60, 30, 30, 60, 60, 20, 
         20, 60, 30, 10, 80, 90, 10, 50, 80, 30, 30, 90, 90, 90, 90, 90, 20, 80, 10, 30, 40, 90, 50, 40, 50, 60, 80, 60, 60, 80, 30, 
         30, 70, 60, 30, 20, 30, 40, 70, 40, 70, 40, 40, 20, 50, 70, 70, 80, 80, 80, 60, 40, 70, 10, 10, 60, 30, 50, 20, 90, 10, 90, 
         60, 40, 60, 50, 60, 90, 80, 70, 10, 50, 90, 80, 80, 90, 10, 20, 40, 80, 40, 30, 90, 20, 90, 70, 90, 40, 40, 20, 40, 90, 40, 
         30, 60, 50, 40, 90, 40, 90, 40, 50, 30, 10, 70, 60, 60, 60, 60, 10, 10, 80, 10, 30, 50, 40, 80, 30, 50, 10, 40, 40, 60, 70, 
         10, 20, 10, 90],
    15: [60, 40, 30, 60, 20, 50, 10, 60, 40, 20, 50, 40, 10, 30, 70, 90, 90, 50, 40, 60, 20, 20, 90, 20, 80, 60, 10, 30, 90, 10, 30, 
         50, 60, 10, 90, 50, 90, 90, 30, 10, 80, 20, 40, 40, 50, 50, 30, 60, 60, 70, 40, 30, 80, 20, 20, 80, 40, 80, 60, 70, 10, 20, 
         50, 20, 90, 10, 90, 80, 70, 40, 30, 40, 10, 40, 50, 70, 80, 10, 70, 60, 90, 40, 80, 80, 20, 50, 70, 70, 70, 10, 20, 60, 50, 
         90, 50, 90, 70, 40, 10, 30, 70, 40, 70, 50, 40],
    10: [70, 30, 10, 10, 60, 50, 10, 60, 60, 90, 20, 10, 60, 20, 60, 50, 70, 80, 20, 20, 60, 80, 40, 30, 80, 70, 70, 80, 60, 60, 20, 
         80, 30, 40, 10, 40, 60, 50, 70, 20, 40, 20, 10, 90, 20],
    5: [40, 50, 70, 60, 50, 60, 30, 40, 80, 80]
}
"""